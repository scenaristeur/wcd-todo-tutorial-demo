/**
 * This function is generated by Webcodesk. Replace this comment with a valuable description.
 * Don't forget to describe outputs and their compatibility with other functions or components.
 */
import { getToDoNotes, saveToDoNotes } from './utils/storage';

function filterNotesByActiveTabType (tabType, notes) {
  notes = notes || [];
  let result = notes;
  if (tabType === 'active') {
    result = notes.filter(i => !i.isCompleted);
  } else if (tabType === 'completed') {
    result = notes.filter(i => !!i.isCompleted);
  }
  return result;
}

/**
 *
 */
// export const initializeNotes = (options, { stateByDispatch, history }) => async (dispatch) => {
//   if (stateByDispatch) {
//     const { todoNotesListProps, navigationTabsProps } = stateByDispatch;
//     let newTodoNotesListProps = { ...todoNotesListProps };
//     let newNavigationTabsProps = { ...navigationTabsProps };
//     try {
//       let storedNotes = await getToDoNotes();
//       storedNotes = storedNotes || [];
//       await saveToDoNotes(storedNotes);
//       newTodoNotesListProps.notes = storedNotes;
//       newNavigationTabsProps.activeTabType = 'all';
//       dispatch({
//         todoNotesListProps: newTodoNotesListProps,
//         navigationTabsProps: newNavigationTabsProps
//       });
//     } catch (e) {
//       alert(e.message);
//     }
//   }
// };

/**
 *
 */
export const toggleNoteCompleted = (noteId) => async (dispatch) => {
  if (noteId) {
      try {
        let storedNotes = await getToDoNotes();
        storedNotes = storedNotes || [];
        const noteItem = storedNotes.find(i => i.id === noteId);
        if (noteItem) {
          noteItem.isCompleted =
            !noteItem.isCompleted;
        }
        dispatch({
          notes: storedNotes
        });
      } catch (e) {
        alert(e.message);
      }
  }
};

/**
 *
 */
export const deleteNote = (noteId) => async (dispatch) => {
  if (noteId) {
    try {
      let storedNotes = await getToDoNotes();
      const noteItemIndex = storedNotes.findIndex(i => i.id === noteId);
      if (noteItemIndex >= 0) {
        storedNotes.splice(noteItemIndex, 1);
      }
      dispatch({
        notes: storedNotes,
      });
    } catch (e) {
      alert(e.message);
    }
  }
};

export const createNewNote = (noteText, { stateByDispatch, history }) => async (dispatch) => {
  try {
    let storedNotes = await getToDoNotes();
    storedNotes = storedNotes || [];
    storedNotes.push({
      id: `${Date.now()}`,
      noteText
    });
    dispatch({
      notes: storedNotes,
    });
  } catch (e) {
    alert(e.message);
  }
};

// export const filterByNavigation = (options, { stateByDispatch }) => async (dispatch) => {
//   if (stateByDispatch && options) {
//     const { tabType } = options;
//     const { todoNotesListProps } = stateByDispatch;
//     if (todoNotesListProps) {
//       try {
//         let storedNotes = await getToDoNotes();
//         storedNotes = storedNotes || [];
//         let newTodoNotesListProps = { ...todoNotesListProps };
//         newTodoNotesListProps.notes = filterNotesByActiveTabType(tabType, storedNotes);
//         dispatch({
//           todoNotesListProps: newTodoNotesListProps,
//         });
//       } catch (e) {
//         console.error(e);
//       }
//     }
//   }
// };

/**
 *
 */
export const getNotes = () => async dispatch => {
  try {
    let storedNotes = await getToDoNotes();
    storedNotes = storedNotes || [];
    dispatch({
      notes: storedNotes
    });
  } catch (e) {
    alert(e.message);
  }
};

/**
 *
 */
export const saveNotes = (notes) => async dispatch => {
  if (notes) {
    try {
      await saveToDoNotes(notes);
      dispatch({
        notes,
        success: true,
      });
    } catch (e) {
      alert(e.message);
    }
  }
};

export const filterNotes = (notes, {stateByDispatch}) => dispatch => {
  if (stateByDispatch && notes) {
    const { todoNotesListProps, navigationTabsProps } = stateByDispatch;
    if (todoNotesListProps) {
      let newTodoNotesListProps = { ...todoNotesListProps };
      if (navigationTabsProps) {
        newTodoNotesListProps.notes =
          filterNotesByActiveTabType(navigationTabsProps.activeTabType, notes);
      }
      console.info('filter notes navigationTabsProps: ', navigationTabsProps);
      dispatch({
        todoNotesListProps: newTodoNotesListProps,
        navigationTabsProps,
      });
    }
  }
};