/**
 * This function is generated by Webcodesk. Replace this comment with a valuable description.
 * Don't forget to describe outputs and their compatibility with other functions or components.
 */
import { getToDoNotes, saveToDoNotes } from './utils/storage';

export const setActiveNavigationTab = (
  options,
  { stateByDispatch, history }
) => dispatch => {
  if (stateByDispatch && options) {
    const { tabType } = options;
    const { props } = stateByDispatch;
    const newProps = {...props, ...{activeTabType: tabType}};
    dispatch({ navigationTabsProps:  newProps});
  }
};

/**
 *
 */
export const initializeNotes = (options, {stateByDispatch, history}) => async (dispatch) => {
  if (stateByDispatch) {
    const { todoNotesListProps, navigationTabsProps } = stateByDispatch;
    let newTodoNotesListProps = {...todoNotesListProps};
    let newNavigationTabsProps = {...navigationTabsProps};
    try {
      let storedNotes = await getToDoNotes();
      if (!storedNotes && todoNotesListProps.notes) {
        storedNotes = todoNotesListProps.notes;
        await saveToDoNotes(storedNotes);
      }
      newTodoNotesListProps.notes = storedNotes;
      newNavigationTabsProps.activeTabType = 'all';
      dispatch({
        todoNotesListProps: newTodoNotesListProps,
        navigationTabsProps: newNavigationTabsProps
      });
    } catch (e) {
      console.error(e);
    }
  }
};

/**
 *
 */
export const toggleNoteCompleted = (options, {stateByDispatch}) => async (dispatch) => {
  if (stateByDispatch && options) {
    const { todoNotesListProps } = stateByDispatch;
    let newTodoNotesListProps = {...todoNotesListProps};
    const { noteIndex } = options;
    try {
      const noteItem = newTodoNotesListProps.notes[noteIndex];
      if (noteItem) {
        newTodoNotesListProps.notes[noteIndex].isCompleted =
          !newTodoNotesListProps.notes[noteIndex].isCompleted;
      }
      await saveToDoNotes(newTodoNotesListProps.notes);
      dispatch({
        todoNotesListProps: newTodoNotesListProps,
      });
    } catch (e) {
      console.error(e);
    }
  }
};

/**
 *
 */
export const deleteNote = (options, {stateByDispatch}) => async (dispatch) => {
  if (stateByDispatch && options) {
    const { todoNotesListProps } = stateByDispatch;
    let newTodoNotesListProps = {...todoNotesListProps};
    const { noteIndex } = options;
    try {
      const noteItem = newTodoNotesListProps.notes[noteIndex];
      if (noteItem) {
        newTodoNotesListProps.notes.splice(noteIndex, 1);
      }
      await saveToDoNotes(newTodoNotesListProps.notes);
      dispatch({
        todoNotesListProps: newTodoNotesListProps,
      });
    } catch (e) {
      console.error(e);
    }
  }
};

export const cancelAddingNote = (options, {history}) => dispatch => {
  if (options) {
    const { hrefOnCancel } = options;
    if (hrefOnCancel) {
      history.push(hrefOnCancel);
    }
  }
};

export const validateNoteText = (options, {stateByDispatch, history}) => dispatch => {
  if (options) {
    const { noteText, hrefOnSaveNote } = options;
    if (noteText) {
      dispatch({
        success: {
          noteText,
          hrefOnSaveNote
        }
      });
    } else {
      if (stateByDispatch) {
        const { error } = stateByDispatch;
        let newProps = {...error};
        newProps.isError = true;
        dispatch({error: newProps});
      }
    }
  }
};

export const saveNewNote = (options, {stateByDispatch, history}) => async (dispatch) => {
  if (stateByDispatch && options) {
    const { noteText, hrefOnSaveNote } = options;
    const { todoNotesListProps } = stateByDispatch;
    let newTodoNotesListProps = {...todoNotesListProps};
    newTodoNotesListProps.notes = newTodoNotesListProps.notes || [];
    newTodoNotesListProps.notes.push({
      id: `${Date.now()}`,
      noteText
    });
    try {
      await saveToDoNotes(newTodoNotesListProps.notes);
      if (hrefOnSaveNote) {
        history.push(hrefOnSaveNote);
      }
      dispatch({
        todoNotesListProps: newTodoNotesListProps,
      });
    } catch (e) {
      console.error(e);
    }
  }
};

export const filterByNavigation = (options, {stateByDispatch}) => async (dispatch) => {
  if (stateByDispatch && options) {
    const { tabType } = options;
    let storedNotes = await getToDoNotes();
    if (storedNotes) {
      if (tabType === 'active') {
        storedNotes = storedNotes.filter(i => !i.isCompleted);
      } else if (tabType === 'completed') {
        storedNotes = storedNotes.filter(i => !!i.isCompleted);
      }
      const { todoNotesListProps } = stateByDispatch;
      let newTodoNotesListProps = {...todoNotesListProps};
      newTodoNotesListProps.notes = storedNotes;
      dispatch({
        todoNotesListProps: newTodoNotesListProps,
      });
    }
  }
};

