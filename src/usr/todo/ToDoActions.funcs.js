/**
 * This function is generated by Webcodesk. Replace this comment with a valuable description.
 * Don't forget to describe outputs and their compatibility with other functions or components.
 */
import { getToDoNotes, saveToDoNotes } from './utils/storage';

export const setActiveNavigationTab = (
  options,
  { stateByDispatch, history }
) => dispatch => {
  if (stateByDispatch && options) {
    const { tabType } = options;
    const { props } = stateByDispatch;
    const newProps = {...props, ...{activeTabType: tabType}};
    dispatch({ navigationTabsProps:  newProps});
  }
};

/**
 *
 */
export const initializeToDoNotes = (options, {stateByDispatch, history}) => async (dispatch) => {
  if (stateByDispatch) {
    const { todoNotesListProps, navigationTabsProps } = stateByDispatch;
    let newTodoNotesListProps = {...todoNotesListProps};
    let newNavigationTabsProps = {...navigationTabsProps};
    try {
      let storedNotes = await getToDoNotes();
      console.info('storedNotes: ', storedNotes);
      if (!storedNotes && todoNotesListProps.notes) {
        storedNotes = todoNotesListProps.notes;
        console.info('replace storedNotes: ', storedNotes);
        await saveToDoNotes(storedNotes);
      }
      newTodoNotesListProps.notes = storedNotes;
      console.info('newTodoNotesListProps: ', newTodoNotesListProps);
      newNavigationTabsProps.activeTabType = 'all';
      dispatch({
        todoNotesListProps: newTodoNotesListProps,
        navigationTabsProps: newNavigationTabsProps
      });
    } catch (e) {
      console.error(e);
    }
  }
};
